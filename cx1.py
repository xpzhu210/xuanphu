# -*- coding: utf-8 -*-
import os
import sys
import time
import requests
import asyncio
import shutil
from colorama import Fore, Style, init

init(autoreset=True)

def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def print_large_text():
    large_text = """
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏‚£ø‚£ø‚£∑‚£ú‚¢ø‚£ß‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°Ñ‚†ª‚£ø‚£ø‚£ø‚£ø‚£¶‚†Ñ‚†Ñ
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚£ø‚£ø‚£ø‚£ø‚£Æ‚°ª‚£∑‚°ô‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ü‚†ô‚£ø‚£ø‚£ø‚£ø‚£ß‚†Ñ
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†è‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚¢∏‚£ø‚£ø‚£ø‚°ò‚¢ø‚£Æ‚°õ‚£∑‚°ô‚¢ø‚£ø‚°è‚¢ª‚£ø‚£ø‚£ø‚£ß‚†ô‚¢ø‚£ø‚£ø‚£∑‚†ò‚¢ø‚£ø‚£Ü‚¢ø‚£ø‚£ø‚£ø‚£Ü
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ê‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†É‚†Ñ‚¢£‚†ª‚£ø‚£ß‚†Ñ‚†ô‚¢∑‚°Ä‚†ô‚¢¶‚°ô‚¢ø‚°Ñ‚†π‚£ø‚£ø‚£ø‚£á‚†Ñ‚†ª‚£ø‚£ø‚£á‚†à‚¢ª‚£ø‚°é‚¢ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ñ‚£ø‚£ø‚£ø‚£ø‚£ø‚†ã‚†Ñ‚£º‚£Ü‚¢ß‚†π‚£ø‚£Ü‚†Ñ‚†à‚†õ‚£Ñ‚†Ñ‚¢¨‚£í‚†ô‚†Ç‚†à‚¢ø‚£ø‚£ø‚°Ñ‚†Ñ‚†à‚¢ø‚£ø‚°Ä‚†Ñ‚†ô‚£ø‚†ò‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ñ‚£ø‚£ø‚£ø‚£ø‚†è‚¢Ä‚£º‚£ø‚£ø‚£é‚†Å‚†ê‚¢ø‚†Ü‚†Ñ‚†Ñ‚†à‚†¢‚†Ñ‚†ô‚¢∑‚£§‚°Ä‚†Ñ‚†ô‚†ø‚†∑‚†Ñ‚†Ñ‚†π‚†á‚†Ñ‚†Ñ‚†ò‚†Ñ‚¢∏‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ñ‚†Ñ‚¢ª‚£ø‚£ø‚†è‚¢Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚°¶‚†Ñ‚†Ñ‚°ò‚¢Ü‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ô‚†ª‚°Ñ‚†Ñ‚†Ñ‚†â‚°Ü‚†Ñ‚†Ñ‚†ë‚†Ñ‚¢†‚°Ä‚†Ñ‚†Ñ‚£ø‚°ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ñ‚†Ñ‚¢∏‚£ø‚†ã‚£∞‚£ø‚£ø‚°ø‚¢ü‚£´‚£µ‚£æ‚£∑‚°Ñ‚¢ª‚£Ñ‚†Å‚†Ñ‚†Ñ‚††‚£Ñ‚†Ñ‚†Ñ‚†à‚†Ç‚†Ñ‚†Ñ‚†à‚†Ñ‚†±‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢∑‚¢Ä‚£†‚£Ω‚°á‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ñ‚†Ñ‚†Ñ‚¢Å‚£ö‚£´‚£≠‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚£Ω‚£∑‚£Ñ‚†Ñ‚†Ñ‚†ò‚¢∑‚£Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚†â‚†à‚†ª‚¢∏‚£ø‚£ø‚°á‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ñ‚¢†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ü‚†õ‚†ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£§‚£§‚£§‚£ø‚£∑‚£∂‚°∂‚†ã‚¢Ä‚°†‚°ê‚¢í‚¢∂‚£ù‚¢ø‚°ü‚£ø‚¢∏‚£ø‚£ø‚°É‚£ø
‚£ø‚£ø‚£ø‚¢π‚£ø‚£ø‚£ø‚£ø‚£∑‚¢†‚£ø‚£ø‚£ø‚£ø‚£Ø‚†∑‚†ê‚†ã‚†ã‚†õ‚†â‚†Å‚†õ‚†õ‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°Ä‚°è‚†ä‚°º‚¢∑‚¢±‚£ø‚°æ‚°∑‚£ø‚¢∏‚°è‚£ø‚¢∞‚£ø
‚£ø‚£ø‚£ø‚¢∏‚£ø‚°ò‚°ø‚£ø‚£ø‚†é‚£ø‚†ü‚†ã‚¢Å‚°Ä‚°†‚£í‚°§‚†¨‚¢≠‚£ñ‚¢ù‚¢∑‚£∂‚£¨‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚¢É‚¢î‚†≠‚¢µ‚££‚£ø‚†ì‚¢µ‚£ø‚¢∏‚¢É‚°á‚¢∏‚£ø
‚£ø‚£ø‚£ø‚°Ñ‚£ø‚°á‚†Ñ‚°ò‚£ø‚£∑‚°∏‚£¥‚£æ‚£ø‚¢∏‚¢±‚¢´‚°û‚£≠‚¢ª‚°º‚°è‚£ß‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚£ï‚£ã‚£â‚£´‚£µ‚£æ‚£ø‚°è‚¢∏‚†∏‚†Å‚¢∏‚°è
‚£ø‚£ø‚£ø‚°á‚†∏‚£∑‚†Ñ‚†à‚†ò‚¢ø‚£ß‚†π‚£π‚£ø‚£∏‚°º‚£ú‚¢∑‚£ï‚£™‚°º‚££‚°ü‚£æ‚£ø‚£ø‚¢Ø‚°ª‚£ü‚¢Ø‚°ª‚£ø‚£Æ‚£∑‚£ù‚¢Æ‚£ª‚£ø‚£ø‚£ù‚£ø‚£ø‚£ø‚¢ø‚£ø‚¢Ä‚†Å‚†Ñ‚¢∏‚†Ñ
‚£ø‚£ø‚°ø‚£á‚†Ñ‚†π‚°Ü‚†Ñ‚†Ñ‚†à‚†ª‚£ß‚†©‚£ä‚£∑‚†ù‚†Æ‚†ï‚†ö‚†ì‚†ö‚£©‚£§‚£ù‚¢ø‚£ø‚£Ø‚°ø‚£Æ‚£∑‚£ø‚£æ‚£ø‚¢ª‚£ø‚£ø‚£ø‚£æ‚£∑‚£Ω‚£ø‚£ø‚£ø‚£ø‚°ü‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢∏
‚†π‚£ø‚°á‚¢π‚†Ñ‚†Ñ‚†ê‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚†£‚†â‚°ª‚£ü‚¢ø‚£ù‚¢ø‚£ù‚†ø‚°ø‚£∑‚£ù‚£∑‚£ù‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚£†‚†Ñ‚†Ñ‚†Ñ‚†à
‚†Ñ‚†ò‚†á‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚††‚£å‚†à‚¢≥‚¢ù‚£Æ‚£ª‚£ø‚£ø‚£Æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä
‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢ª‚£∑‚£§‚£ù‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£á‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£º
‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†è‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£∞‚¢©
‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢ª‚£ø‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†õ‚†ã‚†â‚†â‚†â‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£∏‚£ø‚£ø‚£ø‚£ø‚°ø‚†É‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£∞‚£ø‚£ß
‚£∑‚°Ä‚†Ñ‚†à‚¢¶‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢ª‚£Ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£§‚£§‚£§‚£∂‚£∂‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚°ø‚†ã‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£∞‚£ø‚£ø‚£ø
‚£ø‚£ø‚£¶‚°±‚£å‚¢ª‚£¶‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ô‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ã‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢∞‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£ø‚£ø‚£¶‚£ê‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†â‚†õ‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£´‚°î‚¢Ä‚£¥‚†Ñ‚†Ñ‚†Ñ‚°º‚£†‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†è‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†â‚†â‚†â‚†ô‚†õ‚¢õ‚£õ‚£õ‚£≠‚£æ‚£ø‚£¥‚£ø‚¢á‚£§‚£¶‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚†õ‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø 
                                                              
    """
    print(large_text)

def print_ryder():
    ryder_text = f"""{Fore.CYAN}
--------------------------------------------
|                                          |
| {Fore.YELLOW}Tool Copyright:  SHADOW WAR              {Fore.CYAN}|
| {Fore.YELLOW}DISCORD ƒêA TOKEN   {Fore.CYAN}                      |
|                                          |
--------------------------------------------
    """
    print(ryder_text)

def print_sd():
    cachsudung = f"""{Style.BRIGHT + Fore.GREEN}
C√°ch S·ª≠ D·ª•ng Tool:
- B1: Ch·ªçn ch·∫ø ƒë·ªô spam (1: Treo Ng√¥n | 2: Treo Nh√¢y)
- B2: Nh·∫≠p ID k√™nh Discord (c√°ch nhau d·∫•u ph·∫©y ,)
- B3: Nh·∫≠p t√™n file ch·ª©a token cho t·ª´ng k√™nh
- B4: Ch·ªçn file ch·ª©a n·ªôi dung spam (file .txt)
- B5: Nh·∫≠p delay cho t·ª´ng token
- B6: (Mode 2) Nh·∫≠p ID ng∆∞·ªùi r√©o (tag) m·ªói ID 1 d√≤ng, Enter ƒë·ªÉ k·∫øt th√∫c
- B7: (Mode 2) Nh·∫≠p t√™n r√©o (th√™m t√™n text v√†o n·ªôi dung, c√°ch nhau d·∫•u ph·∫©y)
    """
    print(cachsudung)

def print_boxed_menu():
    clear_screen()
    width = shutil.get_terminal_size().columns
    box_width = min(80, width - 10)

    top_border = "‚ïî" + "‚ïê" * box_width + "‚ïó"
    bottom_border = "‚ïö" + "‚ïê" * box_width + "‚ïù"
    empty_line = "‚ïë" + " " * box_width + "‚ïë"

    def print_centered(text, color=Fore.WHITE, style=Style.NORMAL):
        if len(text) > box_width:
            text = text[:box_width]
        padding_left = (box_width - len(text)) // 2
        padding_right = box_width - len(text) - padding_left
        line = "‚ïë" + " " * padding_left + f"{color}{style}{text}{Style.RESET_ALL}" + " " * padding_right + "‚ïë"
        print(line)

    print(Fore.CYAN + top_border + Style.RESET_ALL)
    print(empty_line)
    print_centered("üî•üî•üî• TOOL SPAM DISCORD üî•üî•üî•", Fore.MAGENTA, Style.BRIGHT)
    print(empty_line)
    print_centered("Author: SHADOW WAR", Fore.YELLOW, Style.BRIGHT)
    print_centered("Discord ƒêa Token", Fore.YELLOW)
    print(empty_line)
    print_centered("L·ª∞A CH·ªåN CH·∫æ ƒê·ªò SPAM", Fore.GREEN, Style.BRIGHT)
    print_centered("1. Treo Ng√¥n", Fore.GREEN)
    print_centered("2. Treo Nh√¢y", Fore.GREEN)
    print(empty_line)
    print_centered("Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n (1 ho·∫∑c 2) v√† Enter:", Fore.CYAN, Style.BRIGHT)
    print(empty_line)
    print(bottom_border)
    print()

def loading_animation():
    text_intro = "ƒêang kh·ªüi ƒë·ªông tool, vui l√≤ng ch·ªù..."
    print(Fore.YELLOW + text_intro + Style.RESET_ALL)

    word = "TOOL SHADOW WAR"
    output = ""
    for char in word:
        output += char
        print(f"\r{Fore.GREEN}{output}{Style.RESET_ALL}", end="", flush=True)
        time.sleep(0.2)
    print()
    print(Fore.YELLOW + "Kh·ªüi ƒë·ªông ho√†n t·∫•t!\n" + Style.RESET_ALL)

def clean_line_for_hash(line):
    stripped = line.lstrip('#').lstrip()
    if stripped == "":
        return ""
    return "# > " + stripped

async def spam_message(token, channel_id, message, delay, spam_line_by_line=False, mention_ids=None, name_mention=None):
    headers = {
        "Authorization": token,
        "Content-Type": "application/json"
    }
    url_send = f"https://discord.com/api/v9/channels/{channel_id}/messages"
    url_typing = f"https://discord.com/api/v9/channels/{channel_id}/typing"

    if spam_line_by_line:
        raw_lines = message.splitlines()
        messages = [clean_line_for_hash(line) for line in raw_lines]
        messages = [line for line in messages if line != ""]
    else:
        raw_lines = message.splitlines()
        cleaned_lines = [clean_line_for_hash(line) for line in raw_lines]
        messages = ["\n".join(cleaned_lines)]

    while True:
        for msg in messages:
            if spam_line_by_line:
                if mention_ids:
                    tags = " ".join(f"<@{uid}>" for uid in mention_ids)
                    msg = f"{msg} {tags}"
                if name_mention:
                    if "(name)" in msg:
                        msg = msg.replace("(name)", name_mention)
                    else:
                        msg = f"{msg} {name_mention}"

            try:
                typing_resp = requests.post(url_typing, headers=headers)
                if typing_resp.status_code == 204:
                    print(f"{Fore.MAGENTA}[Typing] ƒêang so·∫°n tin ·ªü k√™nh {channel_id}...")

                await asyncio.sleep(1.5)

                response = requests.post(url_send, json={"content": msg}, headers=headers)
                if response.status_code == 200:
                    print(f"{Fore.CYAN}[SUCCESS] G·ª≠i tin nh·∫Øn t·ªõi k√™nh {channel_id}: {msg[:50]}{'...' if len(msg)>50 else ''}")
                elif response.status_code == 429:
                    retry_after = response.json().get("retry_after", 1)
                    print(f"{Fore.RED}[RATE LIMIT] T·∫°m d·ª´ng {retry_after} gi√¢y do rate limit.")
                    await asyncio.sleep(retry_after)
                else:
                    print(f"{Fore.RED}[ERROR] L·ªói {response.status_code}: {response.text}")
            except Exception as e:
                print(f"{Fore.RED}[EXCEPTION] {str(e)}")
            await asyncio.sleep(delay)

def input_mode():
    while True:
        print_boxed_menu()
        mode = input().strip()
        if mode in ["1", "2"]:
            return mode
        print(Fore.RED + "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá, vui l√≤ng nh·∫≠p l·∫°i!")

def input_channel_ids():
    raw = input(f"{Fore.CYAN}Nh·∫≠p ID k√™nh (c√°ch nhau d·∫•u ph·∫©y ,):\n").strip()
    channel_ids = [cid.strip() for cid in raw.split(",") if cid.strip()]
    if not channel_ids:
        print(f"{Fore.RED}B·∫°n ch∆∞a nh·∫≠p ID k√™nh n√†o.")
        return input_channel_ids()
    return channel_ids

def input_tokens_for_channel(channel_id):
    while True:
        token_file = input(f"{Fore.CYAN}Nh·∫≠p t√™n file ch·ª©a token cho k√™nh {channel_id}: ").strip()
        if not os.path.exists(token_file):
            print(f"{Fore.RED}File {token_file} kh√¥ng t·ªìn t·∫°i. Nh·∫≠p l·∫°i!")
            continue
        # FIX BOM
        with open(token_file, 'r', encoding='utf-8-sig') as f:
            tokens = [line.strip() for line in f if line.strip()]
        if not tokens:
            print(f"{Fore.RED}File {token_file} kh√¥ng ch·ª©a token n√†o. Nh·∫≠p l·∫°i!")
            continue
        return tokens

def choose_message_file():
    txt_files = [f for f in os.listdir() if f.endswith('.txt')]
    if not txt_files:
        print(f"{Fore.RED}Kh√¥ng t√¨m th·∫•y file .txt n√†o trong th∆∞ m·ª•c.")
        return choose_message_file()
    print(f"{Fore.YELLOW}C√°c file .txt c√≥ s·∫µn:")
    for idx, fname in enumerate(txt_files):
        print(f"{Fore.CYAN}{idx+1}. {fname}")
    while True:
        try:
            idx = int(input(f"{Fore.CYAN}Ch·ªçn file ch·ª©a tin nh·∫Øn (nh·∫≠p s·ªë th·ª© t·ª±): ")) - 1
            if 0 <= idx < len(txt_files):
                return txt_files[idx]
            else:
                print(f"{Fore.RED}Ch·ªçn file kh√¥ng h·ª£p l·ªá. Nh·∫≠p l·∫°i!")
        except ValueError:
            print(f"{Fore.RED}Vui l√≤ng nh·∫≠p s·ªë.")

def input_delay(token_idx, channel_id):
    while True:
        val = input(f"{Fore.YELLOW}Nh·∫≠p delay cho token th·ª© {token_idx+1} (k√™nh {channel_id}): ").strip()
        try:
            delay = float(val)
            if delay < 0:
                print(f"{Fore.RED}Delay ph·∫£i l√† s·ªë kh√¥ng √¢m. Nh·∫≠p l·∫°i!")
                continue
            return delay
        except ValueError:
            print(f"{Fore.RED}Delay ph·∫£i l√† s·ªë. Nh·∫≠p l·∫°i!")

def input_mention_ids():
    print("Nh·∫≠p t·ª´ng user ID Discord ƒë·ªÉ tag, Enter b·ªè qua ƒë·ªÉ k·∫øt th√∫c:")
    mention_ids = []
    while True:
        uid = input("User ID: ").strip()
        if uid == "":
            break
        mention_ids.append(uid)
    return mention_ids

def input_name_mention():
    choose_name = input("B·∫°n c√≥ mu·ªën r√©o t√™n (th√™m t√™n text v√†o n·ªôi dung) kh√¥ng? (y/n): ").strip().lower()
    if choose_name == 'y':
        names = input("Nh·∫≠p t√™n c√°ch nhau b·ªüi d·∫•u ph·∫©y (v√≠ d·ª•: Th√†nh,D∆∞∆°ng,Ken): ").strip()
        return ", ".join([n.strip() for n in names.split(",") if n.strip()])
    return None

def print_large_text_and_ryder():
    print_large_text()
    print_ryder()

async def main():
    print_large_text_and_ryder()
    print_sd()
    input(f"{Fore.CYAN}Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c v√†o menu...")
    loading_animation()

    mode = input_mode()
    spam_line_by_line = (mode == "2")

    mention_ids = []
    name_mention = None

    if spam_line_by_line:
        mention_ids = input_mention_ids()
        name_mention = input_name_mention()

    channel_ids = input_channel_ids()

    tokens_map = {}
    for ch_id in channel_ids:
        tokens_map[ch_id] = input_tokens_for_channel(ch_id)

    message_file = choose_message_file()
    with open(message_file, 'r', encoding='utf-8-sig') as f:  # FIX BOM
        message_content = f.read()

    tasks = []
    for ch_id, tokens in tokens_map.items():
        for idx, token in enumerate(tokens):
            delay = input_delay(idx, ch_id)
            tasks.append(spam_message(token, ch_id, message_content, delay, spam_line_by_line, mention_ids, name_mention))

    print(f"\n{Fore.MAGENTA}Tool thu·ªôc quy·ªÅn s·ªü h·ªØu c·ªßa: SHADOW WAR\n")
    await asyncio.gather(*tasks)

if __name__ == "__main__":
    asyncio.run(main())
